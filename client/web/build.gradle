buildscript {
   ext {
      productionBuild = project.hasProperty('buildenv') && project.property('buildenv') == 'prod'
   }
}

//buildscript {
//   repositories {
//      maven {
//         url "https://plugins.gradle.org/m2/"
//      }
//   }
//
//   dependencies {
//      classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
//   }
//}

//apply plugin: "com.moowork.node"

plugins {
   // The `moowork.gradle` plugin unSupport gradle 6+ now,
   // so using `github.node-gradle` for install node and npm
   // if the grunt and gulp is not required now.
   // See: https://github.com/srs/gradle-node-plugin/pull/349
   id "com.github.node-gradle.node" version "2.2.0"
}

node {
   version = '10.17.0'
   npmVersion = '6.11.3'
   download = true
   workDir = file("${buildDir}/tools/nodejs")
}

task generateIndexFiles(type: NpmTask, dependsOn: npmInstall) {
   group 'build'
   description 'Generate index files.'
   args = ['run', 'generate-index-files']
}

task compileDevelopment(type: NpmTask, dependsOn: npmInstall) {
   onlyIf { !productionBuild }
   description = 'Compiles the main and EM applications using development settings'
   args = ['run', 'build']
}

task compileProduction(type: NpmTask, dependsOn: npmInstall) {
   onlyIf { productionBuild }
   description = 'Compiles the main and EM applications using production settings'
   args = ['run', 'build:prod']
}

task compile(type: NpmTask, dependsOn: npmInstall) {
   group 'build'
   description 'Compile angular'
   dependsOn compileDevelopment, compileProduction
}

task lint(type: NpmTask, dependsOn: npmInstall) {
   group 'verification'
   description = 'Runs the linter on the TypeScript source code'
   args = ['run', 'lint']
}

task test(type: NpmTask, dependsOn: lint) {
   group 'verification'
   description = "Runs the tests, including linting"
   args = ['run', 'test']
}

task build(dependsOn: [compile, test]) {
   group 'build'
   description = 'Build web'
}

task webCodeTestReport(type: NpmTask) {
   group 'verification'
   description = "Runs the report-coverage after test."
   args = ['run', 'report-coverage']
}

task cleanChunk(type: Delete) {
   group 'build'
   delete = ['../server/build/resources/main/static/app', 'dist', 'build']
}

task clean(dependsOn: [cleanChunk]) {
   group 'build'
}

task cleanAll(type: Delete, dependsOn: [clean]) {
   group 'build'
   delete = ['node_modules', '.gradle']
}

task watch(type: NpmTask, dependsOn: npmInstall) {
   group 'build'
   description 'watch angular compile'

   args = ['run', 'build:watch']
}
